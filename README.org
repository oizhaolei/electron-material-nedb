* インストール手順

** MongoDB をインストール
 - ダウンロード
 https://www.mongodb.com/try/download/community

 - インストール
 - MongoDBサービスを常に起動を設定

** PersonalDBをダウンロードしてインストール
 - Windows: exe
 - MacOs: dmg
 - Linux: deb


* 機能一覧

** ログイン

4桁数字のPINCODEを入力することが必要。
固定ではありません、当日の「MMDD」。例えば今日は2020年10月27日なら、PinCodeは「1027」になります。

** ダッシュボード

 - テーブルの一覧
 - クエリの一覧
 - グラフ
 - 統計：サイズなど

** テーブル
*** 新規
 - 名前・メモ
 - CSVの読込み
*** データ照会
*** 削除

*** データ
**** 検索
**** 追加
**** 更新
**** 複数データ同時更新
**** 削除
**** ＣＳＶインポート、データ追加
**** ＣＳＶのエクスポート

** クエリ
*** 新規
 - 名前・メモ
 - 引数とスクリプト

**** 引数欄
引数のサンプル：
#+BEGIN_SRC text
患者番号,採取日
#+END_SRC

入力された引数は、コンマなど符号区切り文字列、
配列に変換されたら、画面上検索の入力項目になります。

**** スクリプト欄

スクリプトのサンプル：
#+BEGIN_SRC javascript
// 画面上の検索項目の値 {患者番号, 採取日} を使って、検索処理を行う
// 指定される患者番号の詳細情報と、採取日以前の検査履歴を返す。
(({ models, filter, log, callback }) => {
  (async () => {
    log.info('vm start.', filter);
    try {
      const patient = await models['patient'].findOne({
        '患者番号': filter['患者番号'],
      }).lean();
      const diseases = await models['disease'].find({
        '患者番号': filter['患者番号'],
        '採取日': {
          $lte: filter['採取日']
        },
      }).lean();
      callback(false, {
        patient: patient ? [patient] : [],
        diseases,
      });
    } catch (e) {
      log.info('e:', e);
      callback(e);
    }
    log.info('vm end');
  })();
})
#+END_SRC

*** もう一つの例：
#+BEGIN_SRC text
手術日
#+END_SRC
#+BEGIN_SRC javascript
(({ models, filter, log, callback }) => {
  (async () => {
    log.info('vm start.', filter);
    try {
      const diseases = await models['syujyutu'].find({
        '手術日': filter[''手術日''],
      }).lean();
      callback(false, {
        diseases,
      });
    } catch (e) {
      log.info('e:', e);
      callback(e);
    }
    log.info('vm end');
  })();
})
#+END_SRC

*** 患者さんの手術日前の一回検査を並びたい
#+BEGIN_SRC text
患者番号
#+END_SRC

#+begin_src javascript

(({ models, filter, log, callback }) => {
  (async () => {
    log.info('vm start.', filter);
    try {
      const criteria = filter['患者番号'] ? {
        'ID': filter['患者番号'],
      } : {};
      const surgeries = await models['surgeries'].find(criteria).lean();
      const surgery =  await Promise.all(surgeries.map(async (s) => {
        console.log('s:', s);
        const [ lastCheck ] = await models['checks'].find({
          '患者番号': s['ID'],
          '採取日': {
            $lte: s['手術日'],
          },
        }).sort({
          '採取日': -1,
        }).limit(1).lean();
        let checks = {};
        if (lastCheck) {
          checks = await models['checks'].find({
            '患者番号': s['ID'],
            '採取日': lastCheck['採取日'],
          }).lean();
          checks = checks.reduce((r, v) => {
            r[v['項目名称']] = v['検査結果値'];
            console.log('v:', v);
            return r;
          }, {});
        }

        console.log('checks:', checks);
        return {
          ...s,
          ...checks,
        };
      }));
      callback(false, {
        surgery,
      });
    } catch (e) {
      log.info('e:', e);
      callback(e);
    }
    log.info('vm end');
  })();
})
#+end_src

*** 患者さんの手術日後の一回検査を並びたい
#+BEGIN_SRC text
患者番号
#+END_SRC

#+begin_src javascript

(({ models, filter, log, callback }) => {
  (async () => {
    log.info('vm start.', filter);
    try {
      const criteria = filter['患者番号'] ? {
        'ID': filter['患者番号'],
      } : {};
      const surgeries = await models['surgeries'].find(criteria).lean();
      const surgery =  await Promise.all(surgeries.map(async (s) => {
        console.log('s:', s);
        const [ lastCheck ] = await models['checks'].find({
          '患者番号': s['ID'],
          '採取日': {
            $gte: s['手術日'],
          },
        }).sort({
          '採取日': 1,
        }).limit(1).lean();
        let checks = {};
        if (lastCheck) {
          checks = await models['checks'].find({
            '患者番号': s['ID'],
            '採取日': lastCheck['採取日'],
          }).lean();
          checks = checks.reduce((r, v) => {
            r[v['項目名称']] = v['検査結果値'];
            console.log('v:', v);
            return r;
          }, {});
        }

        console.log('checks:', checks);
        return {
          ...s,
          ...checks,
        };
      }));
      callback(false, {
        surgery,
      });
    } catch (e) {
      log.info('e:', e);
      callback(e);
    }
    log.info('vm end');
  })();
})
#+end_src

 - models
 データベースに持っているすべてのテーブル
 - filter
 入力された引数のキーと値
 - log
 ログオブジェクト
 - callback
 処理結果のコールバック、フォーマットは「callback(err, data)」


*** 照会
クエリの照会画面には、上半部は引数入力、下半部は検索結果があります。
引数とスクリプトの実行結果、画面上テーブルの形で表示されます。

*** エクスポート
CSVとPDFフォーマットをサポートしています。
PDFは文字化け現象があります。
*** 削除


* 他
** i18n
** ダークモード
** 色パレット
** 自動更新

* Functions
** DONE lazy load
** DONE create table

** DONE import csv to table

** DONE flex search: filtering
** DONE export to csv
** DONE pincode page
** DONE auto version upgrade
** TODO Code Signing
** DONE db backup
*** DONE snapshot at startup
 save to: ~/personaldb-xx.zip

** CANCELLED analysis when schema changes
** DONE i18n

** Query

** Data:
*** DONE detail modal dialog
*** DONE single row/multi row
*** DONE add/remove row
*** CANCELLED edit cell
*** NEXT onColumnDragged / onOrderChange


** Schema field:
*** DONE add
*** CANCELLED rename
*** DONE remove
*** CANCELLED change type
*** CANCELLED default

* FEATURES
** DONE sqlite => nedb => mongo
** DONE electron framework
** DONE ag-grid => material-table
** DONE meterial ui
** DONE dnd to import
** DONE dark theme
** DONE dark theme - PINCODE
** DONE deploy to Win/Macos/Linux
** DONE change mongo url
** TODO sample data
** TODO hooks
** TODO e2e

* BUGS
** DONE find & pagination
** CANCELED Tables  => useContext
** DONE Treeview

** 機能一覧整理
** DONE i18n
** Store to save all
** DONE Schema change
** DONE Update bulkly
** Query bugs
** DONE dashboard
** hotload
** DONE auth route for: pincode
** DONE SOLO component
** CANCELLED schema change
** DONE data crud
** DONE rollbar
** TODO loading
** TODO left menu reload problem: useContext
** DONE confirm before drop
   CLOSED: [2020-11-02 Mon 23:45]
   :LOGBOOK:
   - State "DONE"       from "NEXT"       [2020-11-02 Mon 23:45]
   :END:
** TODO change name / code /...

* そもそもほしいがった機能
 - データ属性の拡張  :OK
 - 項目（更新・検索時）ヒント出す  :OK
 - いろいろ検索、数値、日付タイプ検知、検索条件  :NG

`特定のクエリ、

それぞれの患者、日付前・後のデータ
