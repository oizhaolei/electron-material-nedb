* インストール手順

** MongoDB をインストール
 - ダウンロード
 https://www.mongodb.com/try/download/community

 - インストール
 - MongoDBサービスを常に起動を設定

#+begin_src sh
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

brew tap mongodb/brew

brew install mongodb-community@4.4

brew services restart mongodb-community

brew services list

#+end_src
*** dumpデータのインポート
#+begin_src sh
<MONGO_PATH>/bin/mongorestore --drop -d perm2 dump/perm2
#+end_src

** PersonalDBをダウンロードしてインストール
 - Windows: exe
 - MacOs: dmg
 - Linux: deb


* 機能一覧

** ログイン

4桁数字のPINCODEを入力することが必要。
固定ではありません、当日の「MMDD」。例えば今日は2020年10月27日なら、PinCodeは「1027」になります。
#+attr_html: :width 1000px
file:./images/login.png


** ダッシュボード

 - テーブルの一覧
 - クエリの一覧
 - グラフ
 - 統計：サイズなど
#+attr_html: :width 1000px
file:./images/d1.png

** i18n
** 色パレット
#+attr_html: :width 1000px
file:./images/s1.png
** 自動更新

** テーブル
*** 新規
 - 名前・メモ
#+attr_html: :width 1000px
file:./images/tw1.png
 - CSVの読込み
#+attr_html: :width 1000px
file:./images/tw2.png
#+attr_html: :width 1000px
file:./images/tw3.png
*** データ照会
*** 削除

*** データ
#+attr_html: :width 1000px
file:./images/t1.png
**** 検索
**** 追加
**** 更新
**** 複数データ同時更新
**** 削除
**** ＣＳＶのエクスポート
#+attr_html: :width 1000px
file:./images/t3.png
**** ＣＳＶインポート、データ追加
#+attr_html: :width 1000px
file:./images/t4.png

** クエリ
*** 新規
 - 名前・メモ
#+attr_html: :width 1000px
file:./images/qw1.png
 - 引数とスクリプト
#+attr_html: :width 1000px
file:./images/qw2.png

**** 引数欄
引数のサンプル：
#+BEGIN_SRC text
患者番号,採取日
#+END_SRC

入力された引数は、コンマなど符号区切り文字列、
配列に変換されたら、画面上検索の入力項目になります。

**** スクリプト欄

スクリプトのサンプル：
#+BEGIN_SRC javascript
// 画面上の検索項目の値 {患者番号, 採取日} を使って、検索処理を行う
// 指定される患者番号の詳細情報と、採取日以前の検査履歴を返す。
(({ models, filter, log, callback }) => {
  (async () => {
    log.info('vm start.', filter);
    try {
      const patient = await models['patient'].findOne({
        'ユーザー番号': filter['ユーザー番号'],
      }).lean();
      const diseases = await models['disease'].find({
        'ユーザー番号': filter['ユーザー番号'],
        '取得日': {
          $lte: filter['取得日']
        },
      }).lean();
      callback(false, {
        patient: {
          data: patient ? [patient] : [],
        },
        diseases: {
          data: diseases,
        },
      });
    } catch (e) {
      log.info('e:', e);
      callback(e);
    }
    log.info('vm end');
  })();
})
#+END_SRC

*** もう一つの例：
#+BEGIN_SRC text
処理日
#+END_SRC
#+BEGIN_SRC javascript
(({ models, filter, log, callback }) => {
  (async () => {
    log.info('vm start.', filter);
    try {
      const diseases = await models['syujyutu'].find({
        '処理日': filter['処理日'],
      }).lean();
      callback(false, {
        diseases: {
          data: diseases,
        },
      });
    } catch (e) {
      log.info('e:', e);
      callback(e);
    }
    log.info('vm end');
  })();
})
#+END_SRC

 - models
 データベースに持っているすべてのテーブル
 - filter
 入力された引数のキーと値
 - log
 ログオブジェクト
 - callback
 処理結果のコールバック、フォーマットは「callback(err, data)」


*** 照会
クエリの照会画面には、上半部は引数入力、下半部は検索結果があります。
引数とスクリプトの実行結果、画面上テーブルの形で表示されます。
#+attr_html: :width 1000px
file:./images/q1.png

*** エクスポート
CSVとPDFフォーマットをサポートしています。
PDFは文字化け現象があります。
*** 削除
